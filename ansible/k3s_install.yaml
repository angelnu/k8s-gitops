- hosts: nodes
  vars:
    #k3s_state: uninstalled
    k3s_etcd_datastore: true
    #k3s_release_version: v1.23.5+k3s1 #Do not pin version
    k3s_server:
      cluster-cidr: 10.0.0.0/8
      #flannel-backend: 'none'  # This needs to be in quotes
      disable:
        - traefik
        - servicelb
    k3s_agent:
      #with-node-id: true
      node-label: "{{k8s_labels}}"
  pre_tasks:
    - name: Set each node in masters group to be a control node
      ansible.builtin.set_fact:
        k3s_control_node: true
      when: inventory_hostname in groups["masters"]
  roles:
    - role: xanmanning.k3s

  ####################################################################
  #                          PREPARE NODES                           #
  ####################################################################

- name: "Prepare nodes"
  hosts: nodes
  tasks:
    
  - name: Install helm
    community.general.snap:
      name: helm
      classic: true
  
  ####################################################################
  #                     FIRST NODE ACTIONS                           #
  ####################################################################
  
  - name: "First node actions"
    run_once: True
    when: inventory_hostname == groups.nodes[0]

    block:
      
    - name: Create docker login K8S secret
      shell: |
        {{ KUBECTL_BIN }} create secret docker-registry regcred \
        --docker-username={{ DOCKER_USER }} \
        --docker-password={{ DOCKER_PASSWORD }} \
        --docker-server=https://index.docker.io/v2/ \
        #--docker-email=docker@example.com
      register: result
      failed_when:
      - "'already exists' not in result.stderr"
      - result.rc != 0
      changed_when:
      - "'already exists'  not in result.stderr|join('')"
      retries: 60
      delay: 5

    # - name: "Define docker secret as default"
    #   shell: |
    #     {{ KUBECTL_BIN }} patch serviceaccount default -p '{"imagePullSecrets": [{"name": "regcred"}]}'
    #   register: result
    #   changed_when:
    #   - "'(no change)'  not in result.stdout|join('')"
    
    - name: Check if {{ K8S_TLS_SECRETS_BACKUP }} exists
      stat:
        path: "{{ K8S_TLS_SECRETS_BACKUP }}"
      register: tls_secrets_stat
    
    - name: Create {{ CERT_MANAGER_NAMESPACE }} NS
      shell: |
        {{ KUBECTL_BIN }} create ns {{ CERT_MANAGER_NAMESPACE }}
      run_once: True
      register: result
      failed_when:
      - "'already exists' not in result.stderr"
      - result.rc != 0
      changed_when:
      - "'already exists'  not in result.stderr|join('')"

    - name: Install TLS secret backup
      when: tls_secrets_stat.stat.exists and result.changed
      shell: |
        echo {{ KUBECTL_BIN }} apply -f {{ K8S_TLS_SECRETS_BACKUP }}
    
    - name: Settle first node
      import_tasks: tasks/k8s/kubernetes_node_settle.yaml


  
####################################################################
#                      JOIN NODE ACTIONS                           #
####################################################################    

- name: Join to the first node
  hosts: nodes[1:]
  gather_facts: false #Already queried
  tasks:

  - name: query joined nodes
    shell: "{{ KUBECTL_BIN }} get no -o name"
    run_once: True
    delegate_to: "{{ groups.nodes[0] }}"
    changed_when: False
    register: query_nodes_cmd
  
  - debug:
      msg: "{{query_nodes_cmd.stdout_lines}}"
    run_once: True

####################################################################
#                      ALL NODE SETTINGS                           #
####################################################################    

- name: Apply common settings
  hosts: nodes
  gather_facts: false #Already queried
  tasks:

  - name: "Put kubectl config in default place"
    #TBD: this always result in changed
    shell: |
      rm -f ${HOME}/.kube/config
      mkdir -p ${HOME}/.kube
      ln -s /etc/rancher/k3s/k3s.yaml  ${HOME}/.kube/config
  
  - name: Donwload kubectl config
    run_once: true
    when: inventory_hostname in groups["masters"]
    ansible.builtin.fetch:
      src: /etc/rancher/k3s/k3s.yaml
      dest: "{{ KUBECTL_CONFIG }}"
      flat: yes
  
  - name: Ansible replace string example
    run_once: true
    when: inventory_hostname in groups["masters"]
    #TBD: this always result in changed
    replace:
      path: "{{ KUBECTL_CONFIG }}"
      regexp: '127.0.0.1'
      replace: "{{ inventory_hostname }}"
    delegate_to: localhost

  #- include_tasks: tasks/k8s/setLabels.yaml

  - include_tasks: tasks/k8s/setTaints.yaml

  - include_tasks: tasks/k8s/unsetTaints.yaml